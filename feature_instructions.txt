Below is the finalized updated code and SQL queries for implementing the "Create Private Space" feature in your Supabase-based application. I'll provide the SQL queries to run in your Supabase SQL editor first, followed by the relevant TypeScript code files.

---

### SQL Queries for Supabase SQL Editor

To support the private space feature, you need to update your database schema and Row-Level Security (RLS) policies. Run the following SQL queries in your Supabase SQL editor:

```sql
-- Add private_space_key column to shared_files if it doesn't already exist
ALTER TABLE shared_files ADD COLUMN IF NOT EXISTS private_space_key TEXT;

-- Add private_space_key column to shared_texts if it doesn't already exist
ALTER TABLE shared_texts ADD COLUMN IF NOT EXISTS private_space_key TEXT;

-- Update RLS policies for shared_files
DROP POLICY IF EXISTS "SELECT - Access by network or private key" ON shared_files;
CREATE POLICY "SELECT - Access by network or private key" ON shared_files
FOR SELECT TO public
USING (
  (network_prefix = get_network_prefix()) OR
  (private_space_key = get_private_space_key())
);

DROP POLICY IF EXISTS "INSERT - Anyone can insert" ON shared_files;
CREATE POLICY "INSERT - Anyone can insert" ON shared_files
FOR INSERT TO public
WITH CHECK (true);

DROP POLICY IF EXISTS "DELETE - Allow delete by network or key" ON shared_files;
CREATE POLICY "DELETE - Allow delete by network or key" ON shared_files
FOR DELETE TO public
USING (
  (network_prefix = get_network_prefix()) OR
  (private_space_key = get_private_space_key())
);

-- Update RLS policies for shared_texts
DROP POLICY IF EXISTS "SELECT - Access by network or private key" ON shared_texts;
CREATE POLICY "SELECT - Access by network or private key" ON shared_texts
FOR SELECT TO public
USING (
  (network_prefix = get_network_prefix()) OR
  (private_space_key = get_private_space_key())
);

DROP POLICY IF EXISTS "INSERT - Anyone can insert" ON shared_texts;
CREATE POLICY "INSERT - Anyone can insert" ON shared_texts
FOR INSERT TO public
WITH CHECK (true);

DROP POLICY IF EXISTS "UPDATE - Allow updates by network or key" ON shared_texts;
CREATE POLICY "UPDATE - Allow updates by network or key" ON shared_texts
FOR UPDATE TO public
USING (
  (network_prefix = get_network_prefix()) OR
  (private_space_key = get_private_space_key())
);
```

**Important Notes:**
- The functions `get_network_prefix()` and `get_private_space_key()` are placeholders. You’ll need to implement these as custom PostgreSQL functions in Supabase or adjust the policies to use values passed via request headers or session variables (e.g., using `auth.jwt()` or custom claims). For example, you might pass the `private_space_key` via a header and access it in the policy.
- Ensure your `shared_files` and `shared_texts` tables already exist. If not, you’ll need to create them first with the appropriate columns (e.g., `id`, `network_prefix`, `url`, `name`, etc.).

---

### Updated TypeScript Code

Below are the updated TypeScript files that implement the private space functionality.

#### 1. `networkUtils.ts`
This file contains utility functions for uploading files, saving text, and fetching shared items, now supporting private spaces.

```typescript
// networkUtils.ts
import { supabase } from "@/integrations/supabase/client";

// Helper to get IST timestamp
const getISTTimestamp = (): string => {
  const options: Intl.DateTimeFormatOptions = {
    timeZone: 'Asia/Kolkata',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    hour12: false
  };
  return new Date().toLocaleString('en-IN', options);
};

// Placeholder for getCachedNetworkPrefix (implement as needed)
const getCachedNetworkPrefix = (): string => {
  // Replace with your actual implementation
  return "your-network-prefix";
};

// Upload file to Supabase storage and save metadata
export const uploadFile = async (file: File, privateSpaceKey?: string): Promise<any> => {
  const networkPrefix = privateSpaceKey ? null : getCachedNetworkPrefix();
  if (!networkPrefix && !privateSpaceKey) {
    throw new Error('Network prefix or private space key not available.');
  }

  const fileExt = file.name.split('.').pop() || '';
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').replace('T', '_').replace('Z', '');
  const randomString = Math.random().toString(36).substring(2, 15);
  const sanitizedFileName = file.name.replace(/[^\x00-\x7F]/g, "");
  const filePath = `${privateSpaceKey || networkPrefix}/${timestamp}_${randomString}.${fileExt}`;

  const { data: storageData, error: storageError } = await supabase
    .storage
    .from('shared_files')
    .upload(filePath, file, {
      cacheControl: '3600',
      upsert: false,
      contentType: file.type,
    });

  if (storageError) throw new Error(`Storage error: ${storageError.message}`);
  if (!storageData?.path) throw new Error('Failed to upload file: No storage path received');

  const { data: urlData } = supabase.storage.from('shared_files').getPublicUrl(storageData.path);
  if (!urlData?.publicUrl) throw new Error('Failed to get public URL');

  const { data: fileData, error: dbError } = await supabase
    .from('shared_files')
    .insert({
      name: sanitizedFileName,
      size: file.size,
      type: file.type,
      url: urlData.publicUrl,
      network_prefix: networkPrefix,
      private_space_key: privateSpaceKey,
      shared_at: new Date().toISOString(),
    })
    .select()
    .single();

  if (dbError) {
    await supabase.storage.from('shared_files').remove([storageData.path]);
    throw new Error(`Database error: ${dbError.message}`);
  }

  return fileData;
};

// Fetch shared files
export const fetchSharedFiles = async (privateSpaceKey?: string): Promise<any[]> => {
  if (privateSpaceKey) {
    const { data, error } = await supabase
      .from('shared_files')
      .select('*')
      .eq('private_space_key', privateSpaceKey)
      .order('shared_at', { ascending: false })
      .limit(50);
    if (error) throw error;
    return data || [];
  } else {
    const networkPrefix = getCachedNetworkPrefix();
    if (!networkPrefix) return [];
    const { data, error } = await supabase
      .from('shared_files')
      .select('*')
      .eq('network_prefix', networkPrefix)
      .order('shared_at', { ascending: false })
      .limit(50);
    if (error) throw error;
    return data || [];
  }
};

// Save shared text
export const saveSharedText = async (content: string, privateSpaceKey?: string): Promise<any> => {
  const networkPrefix = privateSpaceKey ? null : getCachedNetworkPrefix();
  if (!networkPrefix && !privateSpaceKey) {
    throw new Error('Network prefix or private space key not available.');
  }

  const { data: existingText, error: fetchError } = await supabase
    .from('shared_texts')
    .select('id')
    .eq(privateSpaceKey ? 'private_space_key' : 'network_prefix', privateSpaceKey || networkPrefix)
    .single();

  if (fetchError && fetchError.code !== 'PGNF') throw fetchError;

  if (existingText) {
    const { data, error } = await supabase
      .from('shared_texts')
      .update({ content, shared_at: getISTTimestamp() })
      .eq('id', existingText.id)
      .select()
      .single();
    if (error) throw error;
    return data;
  } else {
    const { data, error } = await supabase
      .from('shared_texts')
      .insert({
        content,
        network_prefix: networkPrefix,
        private_space_key: privateSpaceKey,
        shared_at: getISTTimestamp(),
      })
      .select()
      .single();
    if (error) throw error;
    return data;
  }
};

// Fetch shared texts
export const fetchSharedTexts = async (privateSpaceKey?: string): Promise<any[]> => {
  if (privateSpaceKey) {
    const { data, error } = await supabase
      .from('shared_texts')
      .select('*')
      .eq('private_space_key', privateSpaceKey)
      .order('shared_at', { ascending: false });
    if (error) throw error;
    return data || [];
  } else {
    const networkPrefix = getCachedNetworkPrefix();
    if (!networkPrefix) return [];
    const { data, error } = await supabase
      .from('shared_texts')
      .select('*')
      .eq('network_prefix', networkPrefix)
      .order('shared_at', { ascending: false });
    if (error) throw error;
    return data || [];
  }
};
```

#### 2. `Index.tsx`
This is the main component that manages the private space state and UI.

```typescript
// Index.tsx
import React, { useState, useEffect } from 'react';
import { toast } from 'sonner';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Upload, FileText } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import Header from '@/components/Header';
import FileUpload from '@/components/FileUpload';
import TextShare from '@/components/TextShare';
import FileList from '@/components/FileList';
import { fetchSharedFiles, fetchSharedTexts } from '@/utils/networkUtils';

const Index: React.FC = () => {
  const [networkConnected, setNetworkConnected] = useState(false);
  const [networkPrefix, setNetworkPrefix] = useState("");
  const [clientIP, setClientIP] = useState("");
  const [isPrivateSpace, setIsPrivateSpace] = useState(false);
  const [privateSpaceKey, setPrivateSpaceKey] = useState("");
  const [sharedFiles, setSharedFiles] = useState<any[]>([]);
  const [sharedTexts, setSharedTexts] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showPrivateSpaceModal, setShowPrivateSpaceModal] = useState(false);
  const [inputKey, setInputKey] = useState("");

  const fetchSharedItems = async () => {
    if (!networkConnected && !isPrivateSpace) {
      setSharedFiles([]);
      setSharedTexts([]);
      setIsLoading(false);
      return;
    }
    setIsLoading(true);
    try {
      const [files, texts] = await Promise.all([
        fetchSharedFiles(isPrivateSpace ? privateSpaceKey : undefined),
        fetchSharedTexts(isPrivateSpace ? privateSpaceKey : undefined),
      ]);
      setSharedFiles(files);
      setSharedTexts(texts);
    } catch (error) {
      toast.error("Failed to load shared items");
    } finally {
      setIsLoading(false);
    }
  };

  const handleNetworkChange = (connected: boolean, prefix: string, ip: string) => {
    setNetworkConnected(connected);
    setNetworkPrefix(prefix);
    setClientIP(ip);
    if (connected && !isPrivateSpace && prefix !== networkPrefix) {
      fetchSharedItems();
    } else if (!connected && !isPrivateSpace) {
      setSharedFiles([]);
      setSharedTexts([]);
    }
  };

  const enterPrivateSpace = () => {
    if (!inputKey) {
      toast.error("Please enter a secret key");
      return;
    }
    setIsPrivateSpace(true);
    setPrivateSpaceKey(inputKey);
    setNetworkConnected(false); // Disable network mode
    setShowPrivateSpaceModal(false);
    fetchSharedItems();
    toast.success(`Entered private space: ${inputKey}`);
  };

  const exitPrivateSpace = () => {
    setIsPrivateSpace(false);
    setPrivateSpaceKey("");
    setInputKey("");
    fetchSharedItems();
    toast.success("Returned to network mode");
  };

  useEffect(() => {
    if (networkConnected || isPrivateSpace) fetchSharedItems();
  }, [networkConnected, networkPrefix, isPrivateSpace, privateSpaceKey]);

  return (
    <div className="min-h-screen bg-background">
      <Header onNetworkChange={handleNetworkChange} />
      <div className="mt-2 text-center">
        <p className="text-xs text-muted-foreground">
          {isPrivateSpace ? (
            <>In private space: {privateSpaceKey}</>
          ) : networkConnected ? (
            <>Connected to network {networkPrefix}.* as {clientIP}</>
          ) : (
            "Not connected to any network"
          )}
        </p>
        {!isPrivateSpace && (
          <Button onClick={() => setShowPrivateSpaceModal(true)} className="mt-2">
            Create/Join Private Space
          </Button>
        )}
        {isPrivateSpace && (
          <Button onClick={exitPrivateSpace} className="mt-2">
            Exit Private Space
          </Button>
        )}
      </div>
      {showPrivateSpaceModal && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-white p-6 rounded-lg">
            <h2 className="text-lg font-medium mb-4">Enter Private Space Key</h2>
            <Input
              type="text"
              value={inputKey}
              onChange={(e) => setInputKey(e.target.value)}
              placeholder="e.g., helpme123"
              className="w-full p-2 border rounded mb-4"
            />
            <div className="flex gap-2">
              <Button onClick={enterPrivateSpace}>Enter</Button>
              <Button onClick={() => setShowPrivateSpaceModal(false)} variant="outline">Cancel</Button>
            </div>
          </div>
        </div>
      )}
      <main className="container max-w-5xl mx-auto px-4 pb-20">
        <Tabs defaultValue="file" className="w-full mt-6">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="file"><Upload className="h-4 w-4" /> File</TabsTrigger>
            <TabsTrigger value="text"><FileText className="h-4 w-4" /> Text</TabsTrigger>
          </TabsList>
          <TabsContent value="file" className="mt-4 space-y-6">
            <FileUpload
              networkConnected={networkConnected || isPrivateSpace}
              onFilesUploaded={() => fetchSharedItems()}
              privateSpaceKey={isPrivateSpace ? privateSpaceKey : undefined}
            />
            <FileList
              files={sharedFiles}
              onDownload={() => {}} // Implement as needed
              onDeleteFile={() => {}} // Implement as needed
              onDeleteAllFiles={() => {}} // Implement as needed
              isLoading={isLoading}
            />
          </TabsContent>
          <TabsContent value="text" className="mt-4">
            <TextShare
              networkConnected={networkConnected || isPrivateSpace}
              onTextShared={() => fetchSharedItems()}
              privateSpaceKey={isPrivateSpace ? privateSpaceKey : undefined}
            />
          </TabsContent>
        </Tabs>
      </main>
    </div>
  );
};

export default Index;
```

#### 3. `FileUpload.tsx`
This component handles file uploads and now supports private spaces.

```typescript
// FileUpload.tsx
import React, { useCallback, useState, useRef } from 'react';
import { toast } from 'sonner';
import { File, Upload, Loader2, X } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { uploadFile } from '@/utils/networkUtils';

interface FileUploadProps {
  networkConnected: boolean;
  onFilesUploaded: (files: any[]) => void;
  privateSpaceKey?: string;
}

const FileUpload: React.FC<FileUploadProps> = ({ networkConnected, onFilesUploaded, privateSpaceKey }) => {
  const [isDragging, setIsDragging] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [uploadStatus, setUploadStatus] = useState('');
  const uploadRef = useRef<boolean>(false);

  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  }, []);

  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
  }, []);

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      handleUpload(Array.from(e.dataTransfer.files));
    }
  }, [networkConnected, privateSpaceKey]);

  const handleFileInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      handleUpload(Array.from(e.target.files));
    }
  }, [networkConnected, privateSpaceKey]);

  const handleUpload = async (fileList: File[]) => {
    if (!networkConnected) {
      toast.error('Not connected', { description: 'Please connect to a network or enter a private space.' });
      return;
    }
    setIsUploading(true);
    setUploadProgress(0);
    try {
      const uploadedFiles = [];
      for (let i = 0; i < fileList.length; i++) {
        if (uploadRef.current) break;
        const file = fileList[i];
        setUploadStatus(`Uploading ${i + 1}/${fileList.length}: ${file.name}`);
        const fileData = await uploadFile(file, privateSpaceKey);
        uploadedFiles.push(fileData);
        setUploadProgress(((i + 1) / fileList.length) * 100);
      }
      if (uploadedFiles.length > 0 && !uploadRef.current) {
        toast.success('Upload complete', { description: `Shared ${uploadedFiles.length} file(s)` });
        onFilesUploaded(uploadedFiles);
      }
    } catch (error) {
      toast.error('Upload failed', { description: (error as Error).message });
    } finally {
      setIsUploading(false);
      setUploadProgress(0);
      setUploadStatus('');
      uploadRef.current = false;
    }
  };

  return (
    <div className="glass-card rounded-lg p-6 animate-fade-in">
      <h2 className="text-lg font-medium mb-4">Share Files</h2>
      <div
        className={`drop-zone ${isDragging ? 'active' : ''} mb-4`}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
      >
        <div className="flex flex-col items-center justify-center py-4">
          {isUploading ? (
            <>
              <Loader2 className="h-10 w-10 animate-spin text-primary mb-3" />
              <p className="text-sm font-medium text-center mb-1">{uploadStatus}</p>
              <div className="w-full max-w-xs mb-2">
                <Progress value={uploadProgress} className="h-2" />
              </div>
              <p className="text-xs text-muted-foreground text-center mb-2">
                {Math.round(uploadProgress)}% complete
              </p>
            </>
          ) : (
            <>
              <Upload className="h-10 w-10 text-muted-foreground mb-3" />
              <p className="text-sm text-center mb-2">
                Drag and drop files here, or{' '}
                <label className="text-primary cursor-pointer hover:underline">
                  browse
                  <input
                    type="file"
                    multiple
                    className="hidden"
                    onChange={handleFileInputChange}
                    disabled={!networkConnected}
                  />
                </label>
              </p>
              <p className="text-xs text-muted-foreground text-center">
                Files will be shared with devices on your network or private space
              </p>
            </>
          )}
        </div>
      </div>
      {!networkConnected && (
        <div className="bg-yellow-50 text-yellow-800 text-xs p-2 rounded mt-2">
          Connect to a network or enter a private space to share files
        </div>
      )}
    </div>
  );
};

export default FileUpload;
```

#### 4. `TextShare.tsx`
This component handles text sharing and now supports private spaces.

```typescript
// TextShare.tsx
import React, { useState, useEffect, useCallback } from 'react';
import { toast } from 'sonner';
import { Save } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { saveSharedText, fetchSharedTexts } from '@/utils/networkUtils';
import debounce from 'lodash/debounce';

interface TextShareProps {
  networkConnected: boolean;
  onTextShared: (text: string) => void;
  privateSpaceKey?: string;
}

const TextShare: React.FC<TextShareProps> = ({ networkConnected, onTextShared, privateSpaceKey }) => {
  const [text, setText] = useState('');
  const [isSaving, setIsSaving] = useState(false);
  const [lastSavedContent, setLastSavedContent] = useState('');
  const [autoSaveStatus, setAutoSaveStatus] = useState<'saved' | 'saving'>('saved');
  const maxLength = 5000;

  const saveContent = useCallback(debounce(async (newContent: string) => {
    if (!networkConnected) return;
    try {
      setIsSaving(true);
      setAutoSaveStatus('saving');
      await saveSharedText(newContent, privateSpaceKey);
      setLastSavedContent(newContent);
      onTextShared(newContent);
      toast.success('Changes saved');
    } catch (error) {
      toast.error('Failed to save changes');
    } finally {
      setIsSaving(false);
      setTimeout(() => setAutoSaveStatus('saved'), 1000);
    }
  }, 1000), [networkConnected, onTextShared, privateSpaceKey]);

  const handleTextChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newContent = e.target.value;
    if (newContent.length <= maxLength) {
      setText(newContent);
      if (newContent !== lastSavedContent) {
        setAutoSaveStatus('saving');
        saveContent(newContent);
      }
    }
  }, [lastSavedContent, saveContent, maxLength]);

  useEffect(() => {
    if (!networkConnected) return;
    const loadContent = async () => {
      const texts = await fetchSharedTexts(privateSpaceKey);
      if (texts.length > 0) {
        setText(texts[0].content || '');
        setLastSavedContent(texts[0].content || '');
      }
    };
    loadContent();
  }, [networkConnected, privateSpaceKey]);

  return (
    <div className="glass-card rounded-lg p-6 animate-fade-in">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-lg font-medium">Text Editor</h2>
        <Badge variant="secondary">{autoSaveStatus}</Badge>
      </div>
      <Textarea
        placeholder="Start typing..."
        value={text}
        onChange={handleTextChange}
        className="min-h-[300px] resize-none font-mono"
        disabled={!networkConnected}
      />
      {!networkConnected && (
        <div className="mt-4 p-3 bg-yellow-50 text-yellow-800 text-sm rounded">
          Connect to a network or private space to start editing
        </div>
      )}
    </div>
  );
};

export default TextShare;
```

---

### Additional Notes
- **Dependencies:** Ensure you have installed required dependencies like `sonner`, `lucide-react`, `lodash`, and your UI component library (e.g., Shadcn UI).
- **Supabase Client:** The `supabase` client import assumes you have set it up in `@/integrations/supabase/client`. Configure it with your Supabase URL and key.
- **Missing Components:** The `Header` and `FileList` components are referenced but not provided here. You’ll need to implement them or adjust the code to match your existing setup.
- **Network Prefix:** The `getCachedNetworkPrefix` function is a placeholder. Replace it with your actual logic for determining the network prefix if you’re using network-based sharing alongside private spaces.

This code and SQL setup enables users to create and join private spaces using a secret key, ensuring that files and text are only accessible to those with the correct key, while maintaining compatibility with network-based sharing.